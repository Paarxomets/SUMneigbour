def update_reaction(user_id, reaction_type):
    with open('likes.json', 'r', encoding='utf-8') as file:
        likes_data = json.load(file)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_reactions = likes_data.get(reaction_type, {})
    if user_id not in user_reactions:
        user_reactions[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–∏–∑–ª–∞–π–∫–æ–≤
    user_reactions[user_id].append(user_id)
    likes_data[reaction_type] = user_reactions

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open('likes.json', 'w', encoding='utf-8') as file:
        json.dump(likes_data, file, ensure_ascii=False, indent=4)


def random_questionnaire(message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users.json
    with open('users.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    random_user_id = choice(data['users'])['id']

    # –ò—â–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    user_data = None
    for user in data['users']:
        if user['id'] == random_user_id:
            user_data = user
            break

    if user_data:
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        but1 = telebot.types.InlineKeyboardButton(text='‚ù§Ô∏è', callback_data='b1')
        but2 = telebot.types.InlineKeyboardButton(text='üëé', callback_data='b2')
        but3 = telebot.types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='b3')
        markup.add(but1, but2, but3)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        image_path = user_data["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"]  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        with open(image_path, 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot.send_photo(message.chat.id, photo, caption=f'''
            –ò–º—è: {user_data["–ò–º—è"]}
            –í–æ–∑—Ä–∞—Å—Ç: {user_data["–í–æ–∑—Ä–∞—Å—Ç"]}
            –ü–æ–ª: {user_data["–ü–æ–ª"]}
            –ò–Ω—Å—Ç–∏—Ç—É—Ç: {user_data["–ò–Ω—Å—Ç–∏—Ç—É—Ç"]}
            –û —Å–µ–±–µ: {user_data["–û —Å–µ–±–µ"]}
            ''', reply_markup=markup)

    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')





bot.reply_to(message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        questionnaire(message)
    else:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')


def remove_user(message):
    with open('users.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
    user_id = message.from_user.id
    found_user = None
    for user in data['users']:
        if user['id'] == user_id:
            found_user = user
            break
    if found_user:
        data['users'].remove(found_user)
    with open('users.json', 'w') as file:
        json.dump(data, file, indent=4)


def questionnaire(message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users.json
    with open('users.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    # –ò—â–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    user_id = message.from_user.id
    user_data = None
    for user in data['users']:
        if user['id'] == user_id:
            user_data = user
            break

    if user_data:
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        but1 = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –ê–Ω–∫–µ—Ç', callback_data='one')
        but4 = telebot.types.InlineKeyboardButton(text='–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫', callback_data='but4')
        but5 = telebot.types.InlineKeyboardButton(text='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', callback_data='but5')
        markup.add(but1, but4, but5)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        image_path = user_data["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"]  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        with open(image_path, 'rb') as photo:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            bot.send_photo(message.chat.id, photo, caption=f'''
            –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:
            –ò–º—è: {user_data["–ò–º—è"]}
            –í–æ–∑—Ä–∞—Å—Ç: {user_data["–í–æ–∑—Ä–∞—Å—Ç"]}
            –ü–æ–ª: {user_data["–ü–æ–ª"]}
            –ò–Ω—Å—Ç–∏—Ç—É—Ç: {user_data["–ò–Ω—Å—Ç–∏—Ç—É—Ç"]}
            –û —Å–µ–±–µ: {user_data["–û —Å–µ–±–µ"]}
            ''', reply_markup=markup)

    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.send_message(message.chat.id, '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')


def options_questionnaire(message):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    b1 = telebot.types.InlineKeyboardButton(text='–ü–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', callback_data='1')
    b3 = telebot.types.InlineKeyboardButton(text='–ó–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data='3')
    keyboard.add(b1, b3)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    if call.data == 'butt1':
        bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    elif call.data == 'butt3':
        bot.send_message(call.message.chat.id, text="–ê –≤—Å–µ —É–∂–µ")
    elif call.data == 'butt4':
        return options_questionnaire(call.message)
    elif call.data == '1':
        bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
    elif call.data == '2':
        bot.send_message(call.message.chat.id, text='–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    elif call.data == 'one':
        bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!')
    else:
        bot.send_message(call.message.chat.id, text="ERROR HANDLE CALLDATA")


@bot.message_handler(func=lambda message: True)
def handle_question(message):
    if message.text:
        if "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in message.text:
            registration(message)
        else:
            bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞ options_questionnaire")
    else:
        bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫')


def random_questionnaire(message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users.json
    with open('users.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    random_user_id = choice(data['users'])['id']

    # –ò—â–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    user_data = None
    for user in data['users']:
        if user['id'] == random_user_id:
            user_data = user
            break